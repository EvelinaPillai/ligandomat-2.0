<!DOCTYPE html>
<html metal:use-macro="load: ../base_layout.pt">
<html lang="${request.locale_name}">
<head>



</head>

<body>
<div class="main_wrapper">
<div id="metadata_wrapper" class="wrapper">
    <table >
        <tr>
            <td><label for="filenametags">Filename: </label></td>
            <td><input type="text" title="The filename of the MS run" id="filenametags"></td>
            <td><label for="reasontags">Reason for exclude: </label></td>
            <td><input title="The reason for exclude:" id="reasontags"></td>
            <td><label for="persontags">Person who is responsible: </label></td>
            <td><input title="Your name. No ä, ü, ö." id="persontags"></td>
        </tr>
    </table>
    <br>

    <div class="datagrid">
        <button onclick="addSource()" class="nice_button">Add Ms run to list</button>
        <br>


        <table id="ms_table" width="100%">
            <!-- The table is created dynamically with js -->
        </table>

        <button id="check_button" class="nice_button" onclick="checkInput()">Check Ms Runs</button>
        <form id="submit" method="POST" action=blacklist_msrun>
            <input type='text' id='commit_field' hidden name="ms_runs">
            <input type="submit" id="commit_button" class="nice_button" hidden value="Commit Ms Run">
        </form>
    </div>
</div>
</div>

<!-- Bootstrap core JavaScript
================================================== -->
<!-- Placed at the end of the document so the pages load faster -->



<script>

    var cells = ['filename',
        'reason',
        'person'];
    var nice_names = {'filename':'Filename',
        'reason': 'Reason',
        'person':'Person'};
    var autocomplete_dict = {
        'filename':${filename},
        'person':${person}};

    $(function () {
        var table = document.getElementById('ms_table');
        var markup = ['<thead><tr><th>Filename</th><th>Reason</th><th>Responsibel Person</th><th style="width:100px">Options</th></tr></thead><tbody>'];


        for (var i = 1; i <= 11; i++) {
            if (i % 2 == 0) {
                markup.push('<tr id="row' + i + '" class="alt">');
            } else {
                markup.push('<tr id="row' + i + '" >');
            }
            markup.push('<td id="filename_' + i + '"> </td>' +
                    '<td id="reason_' + i + '"></td>' +
                    '<td id="person_' + i + '"></td>' +
                    '<td>' +
                    '<button type="button" title="Edit" onclick="editRow(' + i + ')"> <img height="12px" src="${request.static_url('ligando:static/images/Pencil-icon.png')}"> </button> <button type="button" title="Copy"  onclick="copyRow(' + i + ')"> <img height="12px" src="${request.static_url('ligando:static/images/copy-icon.png')}"> </button><button type="button" title="Remove" onclick="removeRow(' + i + ')"> <img height="12px" src="${request.static_url('ligando:static/images/Remove-icon.png')}"> </button> </td></tr>')
        }
        markup.push('</tbody>');
        table.innerHTML = markup.join("");
    });

    // automcomplete
    $(function () {
        for (var i = 0; i < cells.length; i++) {

            if (cells[i] == 'reason') {

            } else {
                $("#" + cells[i] + "tags").autocomplete({
                    minLength: 0,
                    minChars: 0,
                    source: autocomplete_dict[cells[i]]
                }).focus(function () {
                    $(this).autocomplete("search", "");
                });
            }
        }

    });


    $(function () {
        $(document).tooltip();
    });

    $(function() {
        $( "#datetags" ).datepicker({
                    dateFormat: "yy-mm-dd"
                }
        );
        $( "#prep_datetags" ).datepicker({
            dateFormat: "yy-mm-dd"
        });
    });



    function findEmptyRow() {
        for (var i = 1; i < 11; i++) {
            if (document.getElementById("filename_" + i).innerHTML == " ") {
                return i;
            }
        }
        return 0;
    }

    function editRow(id) {
        recoverRow(id);
        removeRow(id);
    }

    function removeRow(id) {
        for (var i = 0; i < cells.length; i++) {
            document.getElementById(cells[i] + "_" + id).innerHTML = "";
        }
        $('#ms_table').dataTable().fnAdjustColumnSizing();
    }

    function copyRow(id) {
        recoverRow(id)
    }

    function recoverRow(id) {
        for (var i = 0; i < cells.length; i++) {
            document.getElementById(cells[i] + 'tags').value = document.getElementById(cells[i] + "_" + id).innerHTML;
        }
    }

    function addSource() {
        var id = findEmptyRow();
        if (id == 0) {
            alert("no free row")
        } else {
            for (var i = 0; i < cells.length; i++) {
                document.getElementById(cells[i] + "_" + id).innerHTML = document.getElementById(cells[i] + 'tags').value;
            }
        }
        $('#ms_table').dataTable().fnAdjustColumnSizing();
        $("#commit_button").hide();
    }


    function checkInput(){
        for(var i=1; i<11; i++){
            if(document.getElementById("filename_"+i).innerHTML != " ") {
                for (var l = 0; l < cells.length; l++) {
                    if(cells[l] == "filename" || cells[l] == "reason" || cells[l] == "person"){
                        if(document.getElementById(cells[l] + "_" + i).innerHTML == ""){
                            alert(nice_names[cells[l]] + " in row "+ i + " is not allowed to be empty!");
                            return;
                        }
                        if(($.inArray(document.getElementById(cells[l] + "_" + i).innerHTML, autocomplete_dict[cells[l]])) == -1) {
                            if (!confirm("The " + nice_names[cells[l]] + " " + document.getElementById(cells[l] + "_" + i).innerHTML + " in row " + i + " is unknown. Is it really correct? (No typos?)")) {
                                return;
                            }
                        }
                    }if(cells[l] == "source" ){
                        if(($.inArray(document.getElementById(cells[l] + "_" + i).innerHTML, autocomplete_dict[cells[l]])) == -1) {
                            alert("The " + nice_names[cells[l]] + " " + document.getElementById(cells[l] + "_" + i).innerHTML + " in row " + i + " is unknown. Please submit the source first.");
                            return;
                        }
                    }
                }
            }
        }
        var val = "[";
        for(var i=1; i<11; i++){
            if(document.getElementById("filename_" + i).innerText != " ") {
                var temp_dict = "{";
                for (var l = 0; l < cells.length; l++) {
                    temp_dict += "'" + cells[l] + "':'" + document.getElementById(cells[l] + "_" + i).innerHTML + "',";
                }
                temp_dict = temp_dict.replace(/,\s*$/, "");
                temp_dict += "},";
                val += temp_dict;
            }
        }
        val = val.replace(/,\s*$/, "");
        val += "]";
        document.getElementById("commit_field").value = val;
        $("#commit_button").show();
    }


    $(document).ready(function() {
        var oTable = $('#ms_table').dataTable({
            "paging":false,
            "ordering":false,
            "info":false,
            "bFilter":false,
            "scrollX": true
        });
        $(window).bind('resize', function () {
            oTable.fnAdjustColumnSizing();
  } );
    } );

    $(document).ready(function() {
        if("${run}" != ""){
            document.getElementById('filenametags').value = "${run}" ;
        }
    });


</script>


</body>
</html>
