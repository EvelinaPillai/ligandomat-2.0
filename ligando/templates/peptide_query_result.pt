
<html metal:use-macro="load: base_layout.pt">
<!DOCTYPE html>
<html lang="${request.locale_name}">
  <head>

  </head>

  <body>
  <div class="main_wrapper">
    <div style="margin-top:20pt">
    <table id="example" auto class="info_table" cellspacing="0" width="100%"> <thead>
            <tr tal:condition="grouping == 'run'">
                <th>Sequence</th>
                <th>RT [min]</th>
                <th>Score</th>
                <th>E-value</th>
                <th>Q-value</th>
                <th>#PSM</th>
                <th>HLA Typing</th>
                <th>Protein</th>
                <th>Histology</th>
                <th>Source</th>
                <th>MS Run</th>
            </tr>
            <tr tal:condition="grouping == 'peptide'">
                <th>Sequence</th>
                <th>Protein</th>
                <th>Source</th>
                <th>Dignity</th>
                <th>HLA Typing</th>
            </tr>
            <tr tal:condition="grouping == 'source'">
                <th>Sequence</th>
                <th>RT [min]</th>
                <th>Score</th>
                <th>E-value</th>
                <th>Q-value</th>
                <th>HLA Typing</th>
                <th>Protein</th>
                <th>Histology</th>
                <th>Source</th>
            </tr>
            <tr tal:condition="grouping == 'source_psm'">
                <th>Sequence</th>
                <th>Score</th>
                <th>E-value</th>
                <th>Q-value</th>
                <th>#PSM</th>
                <th>HLA Typing</th>
                <th>Protein</th>
                <th>Histology</th>
                <th>Source</th>
            </tr>
        </thead></table>
    </div>
</div>


    <script>

    //TODO: Link HLA Typing
    $(document).ready(function() {
    if ("${grouping}" == "run") {
        $('#example').dataTable( {
            data: ${project},
            columns: [
                { data: "sequence" ,
            "render": function ( data, type, row ) {
                return "<a class='nostylelink'  href= '/peptide/"+data + "'>"+data + "</a>" ;
            } },
                { data: "minRT",
                "render": function ( data, type, row ) {
                    return data +' - '+ row.maxRT+'';
                }},
                { data: "minScore",
                "render": function ( data, type, row ) {
                    return data +' - '+ row.maxScore+'';
                }},
                { data: "minE",
                "render": function ( data, type, row ) {
                    return data +' - '+ row.maxE+'';
                }},
                { data: "minQ",
                "render": function ( data, type, row ) {
                    return data +' - '+ row.maxQ+'';
                }},
                { data: "PSM"},
                { data: "hla_typing",
                    // split HLA string and create single links
                    "render": function ( data, type, row ) {
                hla_split = data.split(",");
                return_string = "";
                for (var hla =0; hla<hla_split.length; hla++){
                    if(hla <hla_split.length-1) {
                        return_string += "<a class='nostylelink'  href= '/hla/" + hla_split[hla] + "'>" + hla_split[hla] + "</a>, ";
                    }else{
                            return_string += "<a class='nostylelink'  href= '/hla/" + hla_split[hla] + "'>" + hla_split[hla] + "</a>";
                    }
                }
                return return_string
            }},
                { data: "protein",
                    // split protein string and create single links
            "render": function ( data, type, row ) {
                prot_split = data.split(",");
                return_string = "";
                for (var prot =0; prot<prot_split.length; prot++){
                    if(prot <prot_split.length-1) {
                        return_string += "<a class='nostylelink'  href= '/protein/" + prot_split[prot] + "'>" + prot_split[prot] + "</a>, ";
                    }else{
                            return_string += "<a class='nostylelink'  href= '/protein/" + prot_split[prot] + "'>" + prot_split[prot] + "</a>";
                    }
                }
                return return_string
            }},
                { data: "histology",
            "render": function ( data, type, row ) {
                return "<a class='nostylelink'  href= '/histology/"+data + "'>"+data + "</a>" ;
            }},
                { data: "name",
            "render": function ( data, type, row ) {
                return "<a class='nostylelink'  href= '/source/"+data + "'>"+data + "</a>" ;
            }},
                { data: "filename"}
            ],
            "sDom": 'T<"clear">lfrtip',
            oTableTools: {
                "sSwfPath": "${request.static_url('ligando:static/swf/copy_csv_xls_pdf.swf')}",
                "aButtons":  ["csv"]
            }

        } );
    }else if ("${grouping}" == "peptide"){
        $('#example').dataTable( {
            data: ${project},
            columns: [
                { data: "sequence" ,
            "render": function ( data, type, row ) {
                return "<a class='nostylelink'  href= '/peptide/"+data + "'>"+data + "</a>" ;
            } },
                { data: "protein",
                    // split protein string and create single links
            "render": function ( data, type, row ) {
                prot_split = data.split(",")
                return_string = ""
                for (var prot =0; prot<prot_split.length; prot++){
                    if(prot <prot_split.length-1) {
                        return_string += "<a class='nostylelink'  href= '/protein/" + prot_split[prot] + "'>" + prot_split[prot] + "</a>, ";
                    }else{
                            return_string += "<a class='nostylelink'  href= '/protein/" + prot_split[prot] + "'>" + prot_split[prot] + "</a>";
                    }
                }
                return return_string
            }},
                { data: "name",
                    // split protein string and create single links
                    "render": function ( data, type, row ) {
                protein_split = data.split(",");
                return_string = "";
                for (var protein =0; protein<protein_split.length; protein++){
                    if(protein <protein_split.length-1) {
                        return_string += "<a class='nostylelink'  href= '/protein/" + protein_split[protein] + "'>" + protein_split[protein] + "</a>, ";
                    }else{
                            return_string += "<a class='nostylelink'  href= '/protein/" + protein_split[protein] + "'>" + protein_split[protein] + "</a>";
                    }
                }
                return return_string
            }},
                    { data: "dignity",
                    // split protein string and create single links
            "render": function ( data, type, row ) {
                dignity_split = data.split(",");
                return_string = ""
                for (var dignity =0; dignity<dignity_split.length; dignity++){
                    if(dignity <dignity_split.length-1) {
                        return_string += "<a class='nostylelink'  href= '/protein/" + dignity_split[dignity] + "'>" + dignity_split[dignity] + "</a>, ";
                    }else{
                            return_string += "<a class='nostylelink'  href= '/protein/" + dignity_split[dignity] + "'>" + dignity_split[dignity] + "</a>";
                    }
                }
                return return_string
            }},
                { data: "hla_typing",
                    // split HLA string and create single links
                    "render": function ( data, type, row ) {
                hla_split = data.split(",");
                return_string = "";
                for (var hla =0; hla<hla_split.length; hla++){
                    if(hla <hla_split.length-1) {
                        return_string += "<a class='nostylelink'  href= '/hla/" + hla_split[hla] + "'>" + hla_split[hla] + "</a>, ";
                    }else{
                            return_string += "<a class='nostylelink'  href= '/hla/" + hla_split[hla] + "'>" + hla_split[hla] + "</a>";
                    }
                }
                return return_string
            }}
            ],
            "sDom": 'T<"clear">lfrtip',
            oTableTools: {
                "sSwfPath": "${request.static_url('ligando:static/swf/copy_csv_xls_pdf.swf')}",
                "aButtons":  ["csv"]
            }
        } );
        }
     else if ("${grouping}" == "source"){
        $('#example').dataTable( {
            data: ${project},
            columns: [
                { data: "sequence" ,
            "render": function ( data, type, row ) {
                return "<a class='nostylelink'  href= '/peptide/"+data + "'>"+data + "</a>" ;
            } },
                    { data: "minRT",
                "render": function ( data, type, row ) {
                    return data +' - '+ row.maxRT+'';
                }},
                { data: "minScore",
                "render": function ( data, type, row ) {
                    return data +' - '+ row.maxScore+'';
                }},
                { data: "minE",
                "render": function ( data, type, row ) {
                    return data +' - '+ row.maxE+'';
                }},
                { data: "minQ",
                "render": function ( data, type, row ) {
                    return data +' - '+ row.maxQ+'';
                }},
                { data: "hla_typing",
                    // split HLA string and create single links
                    "render": function ( data, type, row ) {
                hla_split = data.split(",");
                return_string = "";
                for (var hla =0; hla<hla_split.length; hla++){
                    if(hla <hla_split.length-1) {
                        return_string += "<a class='nostylelink'  href= '/hla/" + hla_split[hla] + "'>" + hla_split[hla] + "</a>, ";
                    }else{
                            return_string += "<a class='nostylelink'  href= '/hla/" + hla_split[hla] + "'>" + hla_split[hla] + "</a>";
                    }
                }
                return return_string
            }},
                { data: "protein",
                    // split protein string and create single links
            "render": function ( data, type, row ) {
                prot_split = data.split(",");
                return_string = ""
                for (var prot =0; prot<prot_split.length; prot++){
                    if(prot <prot_split.length-1) {
                        return_string += "<a class='nostylelink'  href= '/protein/" + prot_split[prot] + "'>" + prot_split[prot] + "</a>, ";
                    }else{
                            return_string += "<a class='nostylelink'  href= '/protein/" + prot_split[prot] + "'>" + prot_split[prot] + "</a>";
                    }
                }
                return return_string
            }},
                { data: "histology",
            "render": function ( data, type, row ) {
                return "<a class='nostylelink'  href= '/histology/"+data + "'>"+data + "</a>" ;
            }},
                { data: "source_name",
            "render": function ( data, type, row ) {
                return "<a class='nostylelink'  href= '/source/"+data + "'>"+data + "</a>" ;
            }}
            ],
            "sDom": 'T<"clear">lfrtip',
            oTableTools: {
                "sSwfPath": "${request.static_url('ligando:static/swf/copy_csv_xls_pdf.swf')}",
                "aButtons":  ["csv"]


            }
        } );
    }
        else if ("${grouping}" == "source_psm"){
        $('#example').dataTable( {
            data: ${project},
            columns: [
                { data: "sequence" ,
            "render": function ( data, type, row ) {
                return "<a class='nostylelink'  href= '/peptide/"+data + "'>"+data + "</a>" ;
            }},
                { data: "minScore",
                "render": function ( data, type, row ) {
                    return data +' - '+ row.maxScore+'';
                }},
                { data: "minE",
                "render": function ( data, type, row ) {
                    return data +' - '+ row.maxE+'';
                }},
                { data: "minQ",
                "render": function ( data, type, row ) {
                    return data +' - '+ row.maxQ+'';
                }},
                { data: "PSM"},
                { data: "hla_typing",
                    // split HLA string and create single links
                    "render": function ( data, type, row ) {
                hla_split = data.split(",");
                return_string = "";
                for (var hla =0; hla<hla_split.length; hla++){
                    if(hla <hla_split.length-1) {
                        return_string += "<a class='nostylelink'  href= '/hla/" + hla_split[hla] + "'>" + hla_split[hla] + "</a>, ";
                    }else{
                            return_string += "<a class='nostylelink'  href= '/hla/" + hla_split[hla] + "'>" + hla_split[hla] + "</a>";
                    }
                }
                return return_string
            }},
                { data: "protein",
                    // split protein string and create single links
            "render": function ( data, type, row ) {
                prot_split = data.split(",");
                return_string = "";
                for (var prot =0; prot<prot_split.length; prot++){
                    if(prot <prot_split.length-1) {
                        return_string += "<a class='nostylelink'  href= '/protein/" + prot_split[prot] + "'>" + prot_split[prot] + "</a>, ";
                    }else{
                            return_string += "<a class='nostylelink'  href= '/protein/" + prot_split[prot] + "'>" + prot_split[prot] + "</a>";
                    }
                }
                return return_string
            }},
                { data: "histology",
            "render": function ( data, type, row ) {
                return "<a class='nostylelink'  href= '/histology/"+data + "'>"+data + "</a>" ;
            }},
                { data: "source_name",
            "render": function ( data, type, row ) {
                return "<a class='nostylelink'  href= '/source/"+data + "'>"+data + "</a>" ;
            }}
            ],
            "sDom": 'T<"clear">lfrtip',
            oTableTools: {
                "sSwfPath": "${request.static_url('ligando:static/swf/copy_csv_xls_pdf.swf')}",
                "aButtons":  ["csv"]


            }
        } );
    }
    } );
    </script>


  </body>
</html>
